import Head from 'next/head';
import type { InferGetServerSidePropsType, GetServerSideProps } from 'next';
import { useEffect, useState } from 'react';
import { Field } from '@components/molecules';
import { DropList, SwitchButton, Text } from '@components/atoms';
import { usePaginate } from '@hooks/index';
import styles from '@styles/pages/Admin.module.scss';
import { IconMagnify, IconeDelete, IconeUnsubscribe } from '@assets/svg/icons';
import useNewsLetterAPI from '@hooks/useNewsLetterAPI/useNewsLetterApi';

export default function Admin({
  newsLetters,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const [data, setData] = useState(newsLetters);
  const { items, nextPage, prevPage, currentPage, totalPages } = usePaginate(
    data,
    5
  );

  const {
    errorApi,
    loading,
    deleteSubscribe,
    toggleSubscribe,
    editSubscribe,
    registered,
  } = useNewsLetterAPI();

  const loadData = async () => {
    const newsLetters = await registered();
    setData(newsLetters);
  };

  const handleDeletesubscribe = async (id: string) => {
    await deleteSubscribe(id);
    await loadData();
  };

  const handleUnsubscribe = async (id: string, active: boolean) => {
    await toggleSubscribe(id, active);
    await loadData();
  };

  const handleEditSubscribe = async (id: string, event) => {
    await editSubscribe(id, event.target.value);
    await loadData();
  };

  useEffect(() => {
    console.log('render');
  }, [data]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={styles.admin}>
        <Field
          type='search'
          className='input'
          placeholder='find a subscriber'
          name='search'
          svg={<IconMagnify />}
        />

        <details>
          <summary>Filtre</summary>
          <div>
            <label>Name</label>
            <DropList
              options={[
                { label: 'none', value: 'none' },
                { label: 'Ascendant', value: 'asc' },
                { label: 'Descendant', value: 'desc' },
              ]}
            />
          </div>

          <div>
            <label>CreateAt</label>
            <DropList
              options={[
                { label: 'none', value: 'none' },
                { label: 'Ascendant', value: 'asc' },
                { label: 'Descendant', value: 'desc' },
              ]}
            />
          </div>

          <div>
            <label>UpdateAt</label>
            <DropList
              options={[
                { label: 'none', value: 'none' },
                { label: 'Ascendant', value: 'asc' },
                { label: 'Descendant', value: 'desc' },
              ]}
            />
          </div>
          <div>
            <label>Active</label>
            <DropList
              options={[
                { label: 'all', value: 'none' },
                { label: 'Active', value: 'active' },
                { label: 'Disabled', value: 'disabled' },
              ]}
            />
          </div>

          <footer>
            <button type='button'>Filtrer</button>
            <button type='button'>reset</button>
          </footer>
        </details>
        <div>
          {items.map((item) => (
            <div key={item.id}>
              <input
                className='input'
                type='text'
                defaultValue={item.email}
                {...(!item.active && { disabled: true })}
                onChange={(event) => {
                  handleEditSubscribe(item.id, event);
                }}
              />
              <span>
                <button
                  type='button'
                  onClick={() => {
                    handleDeletesubscribe(item.id);
                  }}
                >
                  <IconeDelete />
                </button>
                <button type='button'>
                  <IconeUnsubscribe
                    onClick={() => {
                      handleUnsubscribe(item.id, !item.active);
                    }}
                  />
                </button>
              </span>
            </div>
          ))}
        </div>
        <div>
          <button onClick={prevPage} disabled={currentPage === 0}>
            Prev
          </button>
          <Text tag='p'>
            Page {currentPage + 1} / {totalPages}
          </Text>
          <button onClick={nextPage} disabled={currentPage === totalPages - 1}>
            Next
          </button>
        </div>
      </main>
    </>
  );
}

export async function loadNewsletter() {
  const url = process.env.NEXT_PUBLIC_API_URL;
  try {
    const res = await fetch(`${url}/newsletter/registered`);
    if (!res.ok) {
      throw new Error('Error loading newsletter data');
    }
    const newsLetter = await res.json();
    return newsLetter;
  } catch (err) {
    console.error(err);
    return [];
  }
}

export const getServerSideProps: GetServerSideProps = async () => {
  const newsLetters = await loadNewsletter();
  return { props: { newsLetters } };
};
